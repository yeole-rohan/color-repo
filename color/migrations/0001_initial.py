# Generated by Django 3.1.4 on 2021-01-09 10:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=12, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '1234567890'. Up to 10 digits allowed.", regex='^\\d{10,10}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img_height', models.PositiveIntegerField(default=330)),
                ('img_width', models.PositiveIntegerField(default=330)),
                ('first_image', models.ImageField(height_field='img_height', upload_to='image/', width_field='img_width')),
                ('second_image', models.ImageField(height_field='img_height', upload_to='image/', width_field='img_width')),
                ('third_image', models.ImageField(height_field='img_height', upload_to='image/', width_field='img_width')),
                ('long_banner_image', models.ImageField(height_field='img_height', upload_to='image/', width_field='img_width')),
            ],
            options={
                'verbose_name': 'Banner',
                'verbose_name_plural': 'Banners',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FrameSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(max_length=50)),
                ('date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'FrameSize',
                'verbose_name_plural': 'FrameSizes',
                'ordering': ['id', 'date', 'size'],
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_related_to_gender', models.CharField(max_length=50)),
                ('date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Gender',
                'verbose_name_plural': 'Genders',
                'ordering': ['id', 'date', 'product_related_to_gender'],
            },
        ),
        migrations.CreateModel(
            name='HomeBanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_one', models.ImageField(upload_to='image/')),
                ('banner_two', models.ImageField(upload_to='image/')),
                ('banner_three', models.ImageField(upload_to='image/')),
                ('banner_four', models.ImageField(upload_to='image/')),
            ],
            options={
                'verbose_name': 'HomeBanner',
                'verbose_name_plural': 'HomeBanners',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PageSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_size', models.CharField(max_length=50)),
                ('date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PageSize',
                'verbose_name_plural': 'PageSizes',
                'ordering': ['id', 'date', 'page_size'],
            },
        ),
        migrations.CreateModel(
            name='ProductSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_sizes', models.CharField(max_length=100)),
                ('date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'ProductSize',
                'verbose_name_plural': 'ProductSizes',
                'ordering': ['id', 'date'],
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(max_length=100)),
                ('date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Theme',
                'verbose_name_plural': 'Themes',
                'ordering': ['id', 'theme', 'date'],
            },
        ),
        migrations.CreateModel(
            name='ThemeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=100)),
                ('date', models.DateTimeField(auto_now=True)),
                ('theme', models.ManyToManyField(to='color.Theme', verbose_name='theme_category')),
            ],
            options={
                'verbose_name': 'ThemeCategory',
                'verbose_name_plural': 'ThemeCategorys',
                'ordering': ['id', 'category', 'date'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_image', models.ImageField(default='/media/image/temple.png', upload_to='product/images/')),
                ('prodcut_description', models.TextField()),
                ('cult_member_price', models.PositiveIntegerField()),
                ('price', models.PositiveIntegerField()),
                ('date', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='product_user')),
                ('product_category', models.ManyToManyField(to='color.ThemeCategory', verbose_name='product_theme_category')),
                ('product_frame_size', models.ManyToManyField(to='color.FrameSize', verbose_name='product_frame_size')),
                ('product_page_size', models.ManyToManyField(to='color.PageSize', verbose_name='product_page_size')),
                ('product_related_to_gender', models.ManyToManyField(to='color.Gender', verbose_name='gender')),
                ('product_size', models.ManyToManyField(to='color.ProductSize', verbose_name='product_size')),
                ('product_theme', models.ManyToManyField(to='color.Theme', verbose_name='product_theme')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Product',
                'ordering': ['id', 'price', 'date'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_images', models.ImageField(upload_to='product/image/')),
                ('date', models.DateTimeField(auto_now=True)),
                ('product_for', models.ForeignKey(default='/media/image/temple.png', on_delete=django.db.models.deletion.CASCADE, to='color.product', verbose_name='for_product_image')),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
                'ordering': ['id', 'date'],
            },
        ),
    ]
